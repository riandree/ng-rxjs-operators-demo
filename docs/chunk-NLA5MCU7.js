import{a as T}from"./chunk-QLNCR4BQ.js";import{a as E,b as O,c as k,d as D,e as R}from"./chunk-GPN5BPXS.js";import{i as S,j as w}from"./chunk-NSKHDLLC.js";import{a as A}from"./chunk-KL4EIJ7V.js";import{$a as y,B as p,Ga as i,Ma as _,Pa as s,Sa as v,Ya as r,Za as o,_a as C,bb as c,db as x,eb as n,fb as F,ga as f,gb as M,ka as g,kb as V,la as h,ma as b}from"./chunk-JXFUZVYF.js";function j(l,t){if(l&1&&(r(0,"li"),n(1),o()),l&2){let I=t.$implicit;i(1),F(I)}}var K=(()=>{let t=class t extends T{getAggregateOperators(){return[{op:p((a,u)=>a+u),desc:"reduce"}]}};t.\u0275fac=(()=>{let a;return function(e){return(a||(a=b(t)))(e||t)}})(),t.\u0275cmp=f({type:t,selectors:[["rxd-reduce"]],standalone:!0,features:[_,V],decls:16,vars:5,consts:[["title","reduce","desc","showing the effect of the 'reduce' operator"],["type","number",3,"ngModel","ngModelChange"],["input",""],[3,"disabled","click"],[4,"ngFor","ngForOf"]],template:function(u,e){if(u&1){let N=y();C(0,"rxd-demo-header",0),n(1,` Please provide a series of numbers using the textfield and the 'next' button below.
`),r(2,"p")(3,"input",1,2),c("ngModelChange",function(m){return e.currentValue=m}),o(),n(5,"\xA0 "),r(6,"button",3),c("click",function(){g(N);let m=x(4);return h(e.next(m.value))}),n(7),o()(),r(8,"ul"),v(9,j,2,1,"li",4),o(),n(10,`
And finally complete the series of numbers using this button. Only after completing the source observable will
the observale that was created by the `),r(11,"b"),n(12,"reduce"),o(),n(13,` Operator emit it's final value (here the sum of all values received until the source completed).
`),r(14,"button",3),c("click",function(){return e.complete()}),n(15,"subject.complete()"),o()}u&2&&(i(3),s("ngModel",e.currentValue),i(3),s("disabled",!e.currentValue),i(1),M("subject.next(",e.currentValue,")"),i(2),s("ngForOf",e.lastValues),i(5),s("disabled",!e.finishable))},dependencies:[A,R,E,D,O,k,w,S],encapsulation:2});let l=t;return l})();export{K as ReduceComponent};
